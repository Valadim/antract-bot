from aiogram import types, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.sheets import get_menu_by_type
from bot import dp  # <-- –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp –æ—Ç—Å—é–¥–∞


class MenuOrder(StatesGroup):
    select_date = State()
    select_meal = State()
    show_dishes = State()


def get_date_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(7):
        day = datetime.today() + timedelta(days=i)
        builder.button(
            text=day.strftime("%d.%m.%Y"),
            callback_data=f"date:{day.strftime('%d.%m.%Y')}"
        )
    builder.adjust(2)
    return builder.as_markup()


def get_meal_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç≥ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="meal:–ó–∞–≤—Ç—Ä–∞–∫")],
        [InlineKeyboardButton(text="ü•£ –û–±–µ–¥", callback_data="meal:–û–±–µ–¥")],
        [InlineKeyboardButton(text="üçΩ –£–∂–∏–Ω", callback_data="meal:–£–∂–∏–Ω")],
    ])


@dp.message(Command("menu"))
async def menu_start(message: types.Message, state: FSMContext):
    await message.answer("üìÖ –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", reply_markup=get_date_keyboard())
    await state.set_state(MenuOrder.select_date)


@dp.callback_query(F.data.startswith("date:"))
async def select_date(callback: CallbackQuery, state: FSMContext):
    date = callback.data.split(":", 1)[1]
    await state.update_data(date=date)
    await callback.message.edit_text(
        f"‚úÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—ë–º –ø–∏—â–∏:",
        reply_markup=get_meal_keyboard()
    )
    await state.set_state(MenuOrder.select_meal)


@dp.callback_query(F.data.startswith("meal:"))
async def select_meal(callback: CallbackQuery, state: FSMContext):
    meal = callback.data.split(":", 1)[1]
    data = await state.get_data()
    date = data["date"]
    await state.update_data(meal=meal)

    dishes = get_menu_by_type(meal_type=meal, date=date)
    if not dishes:
        await callback.message.edit_text(f"üòî –ù–∞ {meal.lower()} {date} –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ—Ç.")
        await state.clear()
        return

    text = f"üìã <b>–ú–µ–Ω—é –Ω–∞ {meal.lower()} {date}:</b>\n\n"
    for dish in dishes:
        text += f"‚Ä¢ {dish['–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞']} ‚Äî {dish['–¶–µ–Ω–∞']} ‚ÇΩ\n"

    await callback.message.edit_text(text)
    await state.clear()


# üëá —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ main.py)
def register_handlers():
    # –≤—Å—ë —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    pass
